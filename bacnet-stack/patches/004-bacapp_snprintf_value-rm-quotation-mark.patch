diff --git a/CMakeLists.txt b/CMakeLists.txt
index 98ada48e..f37efc21 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -800,6 +800,8 @@ if(SERVER_UCI)
     src/bacnet/bacaction.h
     src/bacnet/bacapp.c
     src/bacnet/bacapp.h
+    src/bacnet/bacapp_json.c
+    src/bacnet/bacapp_json.h
     src/bacnet/bacdcode.c
     src/bacnet/bacdcode.h
     src/bacnet/bacdef.h
diff --git a/apps/server-uci/bacnet/basic/object/trendlog.c b/apps/server-uci/bacnet/basic/object/trendlog.c
index 24437a556..4e5a1a7df 100644
--- a/apps/server-uci/bacnet/basic/object/trendlog.c
+++ b/apps/server-uci/bacnet/basic/object/trendlog.c
@@ -1513,6 +1515,130 @@ int TL_encode_entry(uint8_t *apdu, int iLog, int iEntry)
     return (iLen);
 }
 
+int rr_decode_trendlog_entries(
+    uint8_t *apdu, int apdu_len, BACNET_TRENDLOG_RECORD *rec)
+{
+    int len;
+    int status = -1;
+    bool timestamp = false;
+    bool log_value = false;
+    bool status_flags = false;
+    BACNET_TAG tag;
+    rec->next = NULL;
+    rec->status.bits_used = NULL;
+    while (apdu_len > 0) {
+        if (IS_CONTEXT_SPECIFIC(apdu[0]) &&
+            bacnet_is_opening_tag_number(&apdu[0], apdu_len, 0, NULL) &&
+            !timestamp) { 
+            timestamp=true;
+            len = bacnet_datetime_context_decode(apdu, apdu_len, 0, &rec->timestamp);
+            if (len <= 0) {
+                return -1;
+            }
+            apdu += len;
+            apdu_len -= len;
+            status = 1;
+        } else if (IS_CONTEXT_SPECIFIC(apdu[0]) &&
+            bacnet_is_opening_tag_number(&apdu[0], apdu_len, 1, &len) &&
+            !log_value) {
+            log_value = true;
+            /* skip the opening tag */
+            apdu += len;
+            apdu_len -= len;
+
+            /* decode the next context tag which has th value type */
+            len =
+                bacnet_tag_decode(apdu, apdu_len, &tag);
+            if (len <= 0) {
+                return -1;
+            }
+            status = 1;
+            switch (tag.number) {
+                case TL_TYPE_BOOL:
+                    rec->value.tag = BACNET_APPLICATION_TAG_BOOLEAN;
+                    len = bacnet_boolean_context_decode(
+                        apdu, apdu_len, tag.number, &rec->value.type.Boolean);
+                    break;
+                case TL_TYPE_REAL:
+                    rec->value.tag = BACNET_APPLICATION_TAG_REAL;
+                    len = bacnet_real_context_decode(
+                        apdu, apdu_len, tag.number, &rec->value.type.Real);
+                    break;
+                case TL_TYPE_ENUM:
+                    rec->value.tag = BACNET_APPLICATION_TAG_ENUMERATED;
+                    len = bacnet_enumerated_context_decode(
+                        apdu, apdu_len, tag.number, &rec->value.type.Enumerated);
+                    break;
+                case TL_TYPE_UNSIGN:
+                    rec->value.tag = BACNET_APPLICATION_TAG_UNSIGNED_INT;
+                    len = bacnet_unsigned_context_decode(
+                        apdu, apdu_len, tag.number, &rec->value.type.Unsigned_Int);
+                    break;
+                case TL_TYPE_SIGN:
+                    rec->value.tag = BACNET_APPLICATION_TAG_SIGNED_INT;
+                    len = bacnet_signed_context_decode(
+                        apdu, apdu_len, tag.number, &rec->value.type.Signed_Int);
+                    break;
+                case TL_TYPE_BITS:
+                    rec->value.tag = BACNET_APPLICATION_TAG_BIT_STRING;
+                    len = bacnet_bitstring_context_decode(
+                        apdu, apdu_len, tag.number, &rec->value.type.Bit_String);
+                    break;
+                case TL_TYPE_NULL:
+                    rec->value.tag = BACNET_APPLICATION_TAG_NULL;
+                    break;
+                case TL_TYPE_STATUS:
+                    /* print log status bits [log-disabled, buffer-purged, log-interrupted] */
+                    /* should be copy to rec->status? */
+                    rec->value.tag = BACNET_APPLICATION_TAG_BIT_STRING;
+                    len = bacnet_bitstring_context_decode(
+                        apdu, apdu_len, tag.number, &rec->value.type.Bit_String);
+                    break;
+                default:
+                    /* anything to do here? */
+                    /* skip over the value if we don't suppord decoding it */
+                    break;
+            }
+            if (len <= 0) {
+                break;
+            }
+            apdu += len;
+            apdu_len -= len;
+
+            /* skip over the closing tag [1] */
+            if (IS_CONTEXT_SPECIFIC(apdu[0]) &&
+                bacnet_is_closing_tag_number(&apdu[0], apdu_len, 1, &len)) {
+                    apdu += len;
+                    apdu_len -= len;
+            } else {
+                return -1;
+            }
+        } else if (IS_CONTEXT_SPECIFIC(apdu[0]) && !status_flags) {
+            /* TODO Check for Context Tag: 2 */
+            status_flags = true;
+
+            /* print log status bits [in-alarm, fault, overriden, out-of-service] */
+            len = bacnet_bitstring_context_decode(apdu, apdu_len, 2, &rec->status);
+            if (len > 0) {
+                status = 1;
+                apdu += len;
+                apdu_len -= len;
+            }
+        } else {
+            if (apdu_len > 0) {
+                timestamp = false;
+                log_value = false;
+                status_flags = false;
+                rec->next = calloc(sizeof(BACNET_TRENDLOG_RECORD), 1);
+                rec = rec->next;
+                rec->next = NULL;
+                rec->status.bits_used = NULL;
+            }
+        }
+    }
+    return status;
+}
+
 static int local_read_property(
     uint8_t *value,
     uint8_t *status,
diff --git a/apps/server-uci/bacnet/basic/object/trendlog.h b/apps/server-uci/bacnet/basic/object/trendlog.h
index ea05fb0c4..bed3bddfa 100644
--- a/apps/server-uci/bacnet/basic/object/trendlog.h
+++ b/apps/server-uci/bacnet/basic/object/trendlog.h
@@ -51,6 +51,12 @@ bool TrendLogGetRRInfo(
 BACNET_STACK_EXPORT
 int rr_trend_log_encode(uint8_t *apdu, BACNET_READ_RANGE_DATA *pRequest);
 
+BACNET_STACK_EXPORT
+int rr_decode_trendlog_entries(
+    uint8_t *apdu,
+    int apdu_len,
+    BACNET_TRENDLOG_RECORD *pRec);
+
 BACNET_STACK_EXPORT
 void trend_log_timer(uint16_t uSeconds);
 
