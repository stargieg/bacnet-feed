'use strict';
'require view';
'require form';
'require tools.widgets as widgets';

return view.extend({
	render: function() {
		var m, s, o;

		m = new form.Map('bacnet_ao', 'Analog Ouput');
		m.tabbed = false;
		s = m.section(form.TypedSection, 'ao', _('Analog Ouput configuration section'));
		s.anonymous = false;
		s.addremove = true;
		s.addbtntitle = _('Add new Analog Ouput Object...');
		o = s.option(form.Flag, 'disable', _('Disable'));
		o.rmempty = false;
		o = s.option(form.Flag, 'Out_Of_Service', _('Out Of Service'));
		o.rmempty = false;
		o = s.option(form.Value, "name", _("Name"), "Name");
		o.optional = false;
		o.datatype = "string";
		o = s.option(form.Value, "description", _("Description"), "Description");
		o.optional = true;
		o.datatype = "string";
		o = s.option(form.ListValue, "si_unit", _("SI Unit"));
		o.value("95","Keine Einheit");
		o.value("98","Prozent");
		o.value("62","Grad Celsius");
		o.value("63","Grad Kelvin");
		o.value("53","Pascal");
		o.value("134","mbar");
		o.value("27","Hz");
		o.value("80","m^3");
		o.value("82","L");
		o.value("18","Wh");
		o.value("19","kWh");
		o.value("146","MWh");
		o.value("132","mW");
		o.value("47","W");
		o.value("48","kW");
		o.value("49","MW");
		o.value("85","m^3/s");
		o.value("86","m^3/min");
		o.value("87","m^3/min");
		o.optional = true;
		o.datatype = "port";
		o = s.option( form.Value, "value", _("Value"), "0");
		o.optional = true;
		o.rmempty = true;
		o.datatype = "float";
		o = s.option( form.Value, "fb_value", _("Feedback Value"), "0");
		o.optional = true;
		o.rmempty = true;
		o.datatype = "float";
		o = s.option( form.Value, "cov_increment", _("COV Increment"), "0");
		o.optional = true;
		o.rmempty = true;
		o.datatype = "ufloat";
		o = s.option( form.Value, "min_value", _("Min Value"), "0");
		o.optional = true;
		o.rmempty = true;
		o.datatype = "float";
		o = s.option( form.Value, "max_value", _("Max Value"), "0");
		o.optional = true;
		o.rmempty = true;
		o.datatype = "float";
		o = s.option( form.Value, "nc", _("Notification Class"), "0");
		o.optional = true;
		o.rmempty = true;
		o.datatype = "port";
		o = s.option( form.ListValue, "event", _("Event Enable"), "0");
		o.optional = true;
		o.rmempty = true;
		o.value("0","NONE");
		o.value("1","OFFNORMAL");
		o.value("2","FAULT");
		o.value("3","OFFNORMAL and FAULT");
		o.value("4","NORMAL");
		o.value("5","OFFNORMAL and NORMAL");
		o.value("6","FAULT and NORMAL");
		o.value("7","OFFNORMAL and FAULT and NORMAL");
		o = s.option( form.Value, "time_delay", _("Time Delay in s"), "0");
		o.optional = true;
		o.rmempty = true;
		o.datatype = "uinteger";
		o = s.option( form.ListValue, "limit", _("Limit"), "0");
		o.optional = true;
		o.rmempty = true;
		o.value("0","NONE");
		o.value("1","LOW");
		o.value("2","HIGH");
		o.value("3","LOW and HIGH");
		o = s.option( form.Value, "low_limit", _("Low Limit"), "0");
		o.optional = true;
		o.rmempty = true;
		o.datatype = "float";
		o = s.option( form.Value, "high_limit", _("High Limit"), "0");
		o.optional = true;
		o.rmempty = true;
		o.datatype = "float";
		o = s.option( form.Value, "dead_limit", _("Deadband for Limit"), "0");
		o.optional = true;
		o.rmempty = true;
		o.datatype = "ufloat";
		o = s.option( form.ListValue, "notify_type", _("Notify Type"), "0");
		o.value("0","Alarm");
		o.value("1","Event");
		o.optional = true;
		o.rmempty = true;
		return m.render();
	}
});
