diff --git a/apps/readrange/Makefile b/apps/readrange/Makefile
index ea96f209..b4cda5bb 100644
--- a/apps/readrange/Makefile
+++ b/apps/readrange/Makefile
@@ -6,6 +6,7 @@ TARGET = bacrr
 BACNET_OBJECT_DIR = $(BACNET_SRC_DIR)/bacnet/basic/object
 SRC = main.c \
 	$(BACNET_OBJECT_DIR)/client/device-client.c \
+	$(BACNET_OBJECT_DIR)/trendlog.c \
 	$(BACNET_OBJECT_DIR)/netport.c
 
 # TARGET_EXT is defined in apps/Makefile as .exe or nothing
diff --git a/apps/readrange/main.c b/apps/readrange/main.c
index 30a99fec..ea14068b 100644
--- a/apps/readrange/main.c
+++ b/apps/readrange/main.c
@@ -180,10 +180,10 @@ static void print_help(const char *filename)
            "you could send the following commands:\n");
     printf("%s 123 trend-log 2 log-buffer 1 1 10\n", filename);
     printf("%s 123 trend-log 2 log-buffer 2 1 10\n", filename);
-    printf("%s 123 trend-log 2 log-buffer 3 1/1/2014 00:00:01 10\n", filename);
+    printf("%s 123 trend-log 2 log-buffer 3 2014/1/1 00:00:01 10\n", filename);
     printf("%s 123 20 2 131 1 1 10\n", filename);
     printf("%s 123 20 2 131 2 1 10\n", filename);
-    printf("%s 123 20 2 131 3 1/1/2014 00:00:01 10\n", filename);
+    printf("%s 123 20 2 131 3 2014/1/1 00:00:01 10\n", filename);
 }
 
 int main(int argc, char *argv[])
@@ -248,7 +248,7 @@ int main(int argc, char *argv[])
         return 1;
     }
     if (Target_Object_Range_Type == 1) {
-        if (argc < 7) {
+        if (argc < 8) {
             print_usage(filename);
             return 0;
         }
@@ -258,7 +258,7 @@ int main(int argc, char *argv[])
         RR_Request.Range.RefIndex = Target_Object_Index;
         RR_Request.Count = Target_Object_Count;
     } else if (Target_Object_Range_Type == 2) {
-        if (argc < 7) {
+        if (argc < 8) {
             print_usage(filename);
             return 0;
         }
@@ -268,7 +268,7 @@ int main(int argc, char *argv[])
         RR_Request.Range.RefSeqNum = Target_Object_Index;
         RR_Request.Count = Target_Object_Count;
     } else if (Target_Object_Range_Type == 3) {
-        if (argc < 8) {
+        if (argc < 9) {
             print_usage(filename);
             return 0;
         }
diff --git a/src/bacnet/bacapp.c b/src/bacnet/bacapp.c
index 1988867f..0b55b667 100644
--- a/src/bacnet/bacapp.c
+++ b/src/bacnet/bacapp.c
@@ -3093,7 +3093,7 @@ int bacapp_snprintf_value(
 #if defined(BACAPP_BIT_STRING)
             case BACNET_APPLICATION_TAG_BIT_STRING:
                 len = bitstring_bits_used(&value->type.Bit_String);
-                slen = bacapp_snprintf(str, str_len, "{");
+                slen = bacapp_snprintf(str, str_len, "[");
                 ret_val += bacapp_snprintf_shift(slen, &str, &str_len);
                 for (i = 0; i < len; i++) {
                     bool bit;
@@ -3106,7 +3106,7 @@ int bacapp_snprintf_value(
                         ret_val += bacapp_snprintf_shift(slen, &str, &str_len);
                     }
                 }
-                slen = bacapp_snprintf(str, str_len, "}");
+                slen = bacapp_snprintf(str, str_len, "]");
                 ret_val += slen;
                 break;
 #endif
diff --git a/src/bacnet/bacapp.h b/src/bacnet/bacapp.h
index fff5209d..55966a3d 100644
--- a/src/bacnet/bacapp.h
+++ b/src/bacnet/bacapp.h
@@ -204,6 +204,15 @@ typedef struct BACnet_Object_Property_Value {
     BACNET_APPLICATION_DATA_VALUE *value;
 } BACNET_OBJECT_PROPERTY_VALUE;
 
+struct BACnet_Trendlog_Record;
+typedef struct BACnet_Trendlog_Record {
+  BACNET_DATE_TIME timestamp;
+  BACNET_APPLICATION_DATA_VALUE value;
+  BACNET_BIT_STRING status;
+  struct BACnet_Trendlog_Record *next;
+} BACNET_TRENDLOG_RECORD;
+
+
 #ifdef __cplusplus
 extern "C" {
 #endif /* __cplusplus */
diff --git a/src/bacnet/basic/object/trendlog.c b/src/bacnet/basic/object/trendlog.c
index 212e0eb4..c2021042 100644
--- a/src/bacnet/basic/object/trendlog.c
+++ b/src/bacnet/basic/object/trendlog.c
@@ -7,8 +7,8 @@
  */
 #include <stdbool.h>
 #include <stdint.h>
-#include <string.h>
-/* BACnet Stack defines - first */
+#include <string.h> /* for memmove */
+#include <stdlib.h> /* calloc */
 #include "bacnet/bacdef.h"
 /* BACnet Stack API */
 #include "bacnet/bacdcode.h"
@@ -151,7 +151,7 @@ void Trend_Log_Init(void)
     static bool initialized = false;
     int iLog;
     int iEntry;
-    BACNET_DATE_TIME bdatetime = { 0 };
+    BACNET_DATE_TIME bdatetime = { { 0 }, { 0 } };
     bacnet_time_t tClock;
     uint8_t month;
 
@@ -1509,6 +1509,129 @@ int TL_encode_entry(uint8_t *apdu, int iLog, int iEntry)
     return (iLen);
 }
 
+int rr_decode_trendlog_entries(
+    uint8_t *apdu, int apdu_len, BACNET_TRENDLOG_RECORD *rec)
+{
+    int len;
+    int status = -1;
+    bool timestamp = false;
+    bool log_value = false;
+    bool status_flags = false;
+    BACNET_TAG tag;
+    rec->next = NULL;
+    rec->status.bits_used = NULL;
+    while (apdu_len > 0) {
+        if (IS_CONTEXT_SPECIFIC(apdu[0]) &&
+            bacnet_is_opening_tag_number(&apdu[0], apdu_len, 0, NULL) &&
+            !timestamp) { 
+            timestamp=true;
+            len = bacnet_datetime_context_decode(apdu, apdu_len, 0, &rec->timestamp);
+            if (len <= 0) {
+                return -1;
+            }
+            apdu += len;
+            apdu_len -= len;
+            status = 1;
+        } else if (IS_CONTEXT_SPECIFIC(apdu[0]) &&
+            bacnet_is_opening_tag_number(&apdu[0], apdu_len, 1, &len) &&
+            !log_value) {
+            log_value = true;
+            // skip the opening tag
+            apdu += len;
+            apdu_len -= len;
+
+            // decode the next context tag which has th value type
+            len =
+                bacnet_tag_decode(apdu, apdu_len, &tag);
+            if (len <= 0) {
+                return -1;
+            }
+            status = 1;
+            switch (tag.number) {
+                case TL_TYPE_BOOL:
+                    rec->value.tag = BACNET_APPLICATION_TAG_BOOLEAN;
+                    len = bacnet_boolean_context_decode(
+                        apdu, apdu_len, tag.number, &rec->value.type.Boolean);
+                    break;
+                case TL_TYPE_REAL:
+                    rec->value.tag = BACNET_APPLICATION_TAG_REAL;
+                    len = bacnet_real_context_decode(
+                        apdu, apdu_len, tag.number, &rec->value.type.Real);
+                    break;
+                case TL_TYPE_ENUM:
+                    rec->value.tag = BACNET_APPLICATION_TAG_ENUMERATED;
+                    len = bacnet_enumerated_context_decode(
+                        apdu, apdu_len, tag.number, &rec->value.type.Enumerated);
+                    break;
+                case TL_TYPE_UNSIGN:
+                    rec->value.tag = BACNET_APPLICATION_TAG_UNSIGNED_INT;
+                    len = bacnet_unsigned_context_decode(
+                        apdu, apdu_len, tag.number, &rec->value.type.Unsigned_Int);
+                    break;
+                case TL_TYPE_SIGN:
+                    rec->value.tag = BACNET_APPLICATION_TAG_SIGNED_INT;
+                    len = bacnet_signed_context_decode(
+                        apdu, apdu_len, tag.number, &rec->value.type.Signed_Int);
+                    break;
+                case TL_TYPE_BITS:
+                    rec->value.tag = BACNET_APPLICATION_TAG_BIT_STRING;
+                    len = bacnet_bitstring_context_decode(
+                        apdu, apdu_len, tag.number, &rec->value.type.Bit_String);
+                    break;
+                case TL_TYPE_NULL:
+                    rec->value.tag = BACNET_APPLICATION_TAG_NULL;
+                    break;
+                case TL_TYPE_STATUS:
+                    //print log status bits [log-disabled, buffer-purged, log-interrupted]
+                    //should be copy to rec->status?
+                    rec->value.tag = BACNET_APPLICATION_TAG_BIT_STRING;
+                    len = bacnet_bitstring_context_decode(
+                        apdu, apdu_len, tag.number, &rec->value.type.Bit_String);
+                    break;
+                default:
+                    // anything to do here?
+                    // skip over the value if we don't suppord decoding it
+            }
+            if (len <= 0) {
+                break;
+            }
+            apdu += len;
+            apdu_len -= len;
+
+            // skip over the closing tag [1]
+            if (IS_CONTEXT_SPECIFIC(apdu[0]) &&
+                bacnet_is_closing_tag_number(&apdu[0], apdu_len, 1, &len)) {
+                    apdu += len;
+                    apdu_len -= len;
+            } else {
+                return -1;
+            }
+        } else if (IS_CONTEXT_SPECIFIC(apdu[0]) && !status_flags) {
+            //TODO Check for Context Tag: 2
+            status_flags = true;
+
+            //print log status bits [in-alarm, fault, overriden, out-of-service]
+            len = bacnet_bitstring_context_decode(apdu, apdu_len, 2, &rec->status);
+            if (len > 0) {
+                status = 1;
+                apdu += len;
+                apdu_len -= len;
+            }
+        } else {
+            if (apdu_len > 0) {
+                timestamp = false;
+                log_value = false;
+                status_flags = false;
+                rec->next = calloc(sizeof(BACNET_TRENDLOG_RECORD), 1);
+                rec = rec->next;
+                rec->next = NULL;
+                rec->status.bits_used = NULL;
+            }
+        }
+    }
+    return status;
+}
+
 static int local_read_property(
     uint8_t *value,
     uint8_t *status,
diff --git a/src/bacnet/basic/object/trendlog.h b/src/bacnet/basic/object/trendlog.h
index ea05fb0c..bed3bddf 100644
--- a/src/bacnet/basic/object/trendlog.h
+++ b/src/bacnet/basic/object/trendlog.h
@@ -171,6 +171,12 @@ bool TrendLogGetRRInfo(
 BACNET_STACK_EXPORT
 int rr_trend_log_encode(uint8_t *apdu, BACNET_READ_RANGE_DATA *pRequest);
 
+BACNET_STACK_EXPORT
+int rr_decode_trendlog_entries(
+    uint8_t *apdu,
+    int apdu_len,
+    BACNET_TRENDLOG_RECORD *pRec);
+
 BACNET_STACK_EXPORT
 void trend_log_timer(uint16_t uSeconds);
 
diff --git a/src/bacnet/basic/service/h_rr_a.c b/src/bacnet/basic/service/h_rr_a.c
index 1c29907f..ce2b4182 100644
--- a/src/bacnet/basic/service/h_rr_a.c
+++ b/src/bacnet/basic/service/h_rr_a.c
@@ -18,6 +18,7 @@
 #include "bacnet/basic/object/device.h"
 #include "bacnet/basic/services.h"
 #include "bacnet/basic/tsm/tsm.h"
+#include "bacnet/basic/object/trendlog.h"
 
 /** @file h_rr_a.c  Handles Read Range Acknowledgments. */
 
@@ -25,60 +26,63 @@
 static void PrintReadRangeData(BACNET_READ_RANGE_DATA *data)
 {
 #ifdef BACAPP_PRINT_ENABLED
-    BACNET_OBJECT_PROPERTY_VALUE object_value; /* for bacapp printing */
-#endif
-    BACNET_APPLICATION_DATA_VALUE value; /* for decode value data */
-    int len = 0;
-    uint8_t *application_data;
-    int application_data_len;
-    bool first_value = true;
-#if PRINT_ENABLED
-    bool print_brace = false;
+    BACNET_OBJECT_PROPERTY_VALUE object_value;
 #endif
+    BACNET_APPLICATION_DATA_VALUE value;
+    BACNET_TRENDLOG_RECORD entry;
+    BACNET_TRENDLOG_RECORD *p;
+    int status = 0;
 
     if (data) {
-        application_data = data->application_data;
-        application_data_len = data->application_data_len;
+#ifdef BACAPP_PRINT_ENABLED
+        object_value.object_type = data->object_type;
+        object_value.object_instance = data->object_instance;
+        object_value.object_property = data->object_property;
+        object_value.array_index = data->array_index;
+#endif
+
         /* FIXME: what if application_data_len is bigger than 255? */
         /* value? need to loop until all of the len is gone... */
-        for (;;) {
-            len = bacapp_decode_application_data(
-                application_data, (uint8_t)application_data_len, &value);
-            if (first_value && (len < application_data_len)) {
-                first_value = false;
-#if PRINT_ENABLED
-                fprintf(stdout, "{");
-                print_brace = true;
-#endif
-            }
+        status = rr_decode_trendlog_entries(
+            data->application_data, data->application_data_len, &entry);
 #ifdef BACAPP_PRINT_ENABLED
-            object_value.object_type = data->object_type;
-            object_value.object_instance = data->object_instance;
-            object_value.object_property = data->object_property;
-            object_value.array_index = data->array_index;
+        if (status < 1) {
+            return;
+        }
+        //json open list
+        printf("{\n \"list\": [\n");
+        for (p = &entry; p != NULL; p = p->next) {
+            //json open array
+            printf("  [");
+            //print timestamp
             object_value.value = &value;
+            value.tag = BACNET_APPLICATION_TAG_TIMESTAMP;
+            value.type.Time_Stamp.tag = TIME_STAMP_DATETIME;
+            value.type.Time_Stamp.value.dateTime = p->timestamp;
+            printf("\"");
             bacapp_print_value(stdout, &object_value);
-#endif
-            if (len > 0) {
-                if (len < application_data_len) {
-                    application_data += len;
-                    application_data_len -= len;
-                    /* there's more! */
-#if PRINT_ENABLED
-                    fprintf(stdout, ",");
-#endif
-                } else {
-                    break;
-                }
-            } else {
-                break;
-            }
-        }
-#if PRINT_ENABLED
-        if (print_brace) {
-            fprintf(stdout, "}");
+            printf("\",");
+
+            //print log value or status bits [log-disabled, buffer-purged, log-interrupted]
+            object_value.value = &p->value;
+            bacapp_print_value(stdout, &object_value);
+            printf(",");
+
+            //print log status bits [in-alarm, fault, overriden, out-of-service]
+            object_value.value = &value;
+            value.tag = BACNET_APPLICATION_TAG_BIT_STRING;
+            value.type.Bit_String = p->status;
+            //TODO replace {} with [] in bacapp_snprintf_value #BACNET_APPLICATION_TAG_BIT_STRING
+            bacapp_print_value(stdout, &object_value);
+
+            if (p->next)
+                printf("],\n");
+            else
+                //json last element
+                printf("]\n");
         }
-        fprintf(stdout, "\r\n");
+        //json close list
+        printf(" ]\n}\n");
 #endif
     }
 }
