#!/bin/sh

#PATH=$PATH:"/Users/patrick/bacnet-stack-test/bin"
#export BACNET_IFACE=eth0
#*/10 * *  *  * bacwi -1 > /tmp/address_cache

[ -f /lib/functions.sh ] && . /lib/functions.sh
[ -f /usr/share/libubox/jshn.sh ] && . /usr/share/libubox/jshn.sh
[ -f /usr/local/share/libubox/jshn.sh ] && . /usr/local/share/libubox/jshn.sh
[ -f /lib/functions/network.sh ] && . /lib/functions/network.sh

set -o pipefail

cd /tmp

log() {
	if [ "$BACNET_DEBUG" == "1" ] ; then
		logger -t bacnetclient "$@"
	fi
}

collectd() {
	touch /tmp/collectd.last
	config_load luci_statistics
	config_get enable collectd_unixsock enable
	[ "$enable" == "1" ] || return
	config_get SocketFile collectd_unixsock SocketFile
	[ -e "$SocketFile" ] || return
	config_get DataDir collectd_rrdtool DataDir
	[ -z "$DataDir" ] && return
	if [ ! -f /tmp/devlist.json ] ; then
		touch /tmp/devlist.json.get 2>/dev/null
		log "touch /tmp/devlist.json.get"
		return
	fi
	devids=""
	json_load_file /tmp/devlist.json
	json_select "list"
	k=1;while json_is_a ${k} object;do
		json_select ${k}
		json_get_var devid devid
		deny=0
		for deny_id in $BACNET_DENY_LIST_LOG ; do
			if [ "$devid" == "$deny_id" ] ; then
				deny=1
			fi
		done
		if [ "$deny" == "0" ] ; then
			devids="$devids $devid"
		fi

		k=$(( k + 1 ))
		json_select ..
	done
	log "devids: $devids"
	json_cleanup
	if [ "$devids" == "" ] ; then
		touch /tmp/devlist.json.get 2>/dev/null
		log "touch /tmp/devlist.json.get no device"
		continue
	fi
	for devid in $devids; do
		if [ ! -f /tmp/objlist_$devid.json ] ; then
			touch /tmp/objlist.json.get 2>/dev/null
			touch /tmp/objlist_$devid.json.get 2>/dev/null
			log "touch /tmp/objlist_$devid.json.get"
			continue
		fi
		json_load_file /tmp/obj$devid.json
		json_select "list"
		objs=""
		l=1;while json_is_a ${l} object;do
			json_select ${l}
			json_get_keys object_type
			#FIME space and underline
			if [ "$object_type" == " trend_log" ] ; then
				json_get_var object_instance $object_type
				objs="$objs $object_instance"
			fi
			json_select ..
			l=$(( l + 1 ))
		done
		log "objs: $objs"
		json_cleanup
		if [ "$objs" == "" ] ; then
			touch /tmp/objlist.json.get 2>/dev/null
			touch /tmp/objlist_$devid.json.get 2>/dev/null
			log "touch /tmp/objlist_$devid.json.get"
			continue
		fi
		dev_name="$(bacrp $devid device $devid object-name)"
		[ "$?" == "0" ] || continue
		dev_name="$(echo $dev_name | tr -d '\r' | tr -s ' ' '_' | sed 's/\ä/ae/g;s/\Ä/Ae/g;s/\ö/oe/g;s/\Ö/Oe/g;s/\ü/ue/g;s/\Ü/Ue/g;s/\ß/ss/g')"
		[ -z "$dev_name" ] && continue

		config_load bacnetclient
		config_get delimeter_name "$devid" delimeter_name
		[ -z "$delimeter_name" ] && delimeter_name="$BACNET_DELIMETER_NAME"
		config_get delimeter_desc "$devid" delimeter_desc
		[ -z "$delimeter_desc" ] && delimeter_desc="$BACNET_DELIMETER_DESC"
		config_get delimeter_group_name_count "$devid" delimeter_group_name_count
		[ -z "$delimeter_group_name_count" ] && delimeter_group_name_count="$BACNET_DELIMETER_GROUP_NAME_COUNT"
		config_get delimeter_group_desc_count "$devid" delimeter_group_desc_count
		[ -z "$delimeter_group_desc_count" ] && delimeter_group_desc_count="$BACNET_DELIMETER_GROUP_DESC_COUNT"

		for obj_id in $objs ; do
			log "bacrp $devid trend-log $obj_id 141"
			count="$(bacrp $devid trend-log $obj_id 141)"
			[ "$?" == "0" ] || continue
			count="$(echo $count | tr -d '\r')"
			log "bacrp $devid trend-log $obj_id 132"
			ref="$(bacrp $devid trend-log $obj_id 132)"
			[ "$?" == "0" ] || continue
			ref="$(echo $ref | tr -d '\r')"
			j=1
			ref_devid=""
			for opt in $ref ; do
				case $j in
				1) [ "$opt" == "-1" ] || ref_devid="$opt" ;;
				2) ref_object_type="$opt" ;;
				3) ref_object_instance="$opt" ;;
				4) ref_object_property="$opt" ;;
				esac
				j=$(( j + 1 ))
			done
			if [ -z "$ref_devid" ] ; then
				ref_devid="$devid"
			else
				dev_name="$(bacrp $ref_devid device $ref_devid object-name)"
				[ "$?" == "0" ] || continue
				dev_name="$(echo $dev_name | tr -d '\r' | tr -s ' ' '_' | sed 's/\ä/ae/g;s/\Ä/Ae/g;s/\ö/oe/g;s/\Ö/Oe/g;s/\ü/ue/g;s/\Ü/Ue/g;s/\ß/ss/g')"
				[ -z "$dev_name" ] && continue
			fi
			object_name="$(bacrp $ref_devid $ref_object_type $ref_object_instance object-name)"
			[ "$?" == "0" ] || continue
			object_name="$(echo $object_name | tr -d '\r' | tr -s ' ' '_' | sed 's/\ä/ae/g;s/\Ä/Ae/g;s/\ö/oe/g;s/\Ö/Oe/g;s/\ü/ue/g;s/\Ü/Ue/g;s/\ß/ss/g')"
			[ -z "$object_name" ] && continue
			Description="$(bacrp $ref_devid $ref_object_type $ref_object_instance Description)"
			[ "$?" == "0" ] || Description="$object_name"
			Description="$(echo $Description | tr -d '\r' | tr -s ' ' '_'| sed 's/\ä/ae/g;s/\Ä/Ae/g;s/\ö/oe/g;s/\Ö/Oe/g;s/\ü/ue/g;s/\Ü/Ue/g;s/\ß/ss/g')"
			ret=0
			case $ref_object_type in
				analog*)
					log "bacrp $ref_devid $ref_object_type $ref_object_instance units"
					value_units="$(bacrp $ref_devid $ref_object_type $ref_object_instance units)"
					ret="$?"
					value_units="$(echo $value_units | tr -d '\r')"
					;;
				binary*)
					log "bacrp $ref_devid $ref_object_type $ref_object_instance state"
					value_units="binary"
					;;
				*)
					value_units="unknown"
					count=-1
					;;
			esac
			[ "$ret" == "0" ] || continue
			case $value_units in
				cubic-meters-per-hour)
					collectd_types="flow"
				;;
				liters-per-second)
					collectd_types="flow"
				;;
				percent-relative-humidity)
					collectd_types="humidity"
				;;
				parts-per-million)
					collectd_types="objects"
				;;
				degrees-celsius)
					collectd_types="temperature"
				;;
				pascals)
					collectd_types="pressure"
				;;
				percent)
					collectd_types="percent"
				;;
				hertz)
					collectd_types="frequency"
				;;
				binary)
					collectd_types="bool"
				;;
				*)
					count=-1
				;;
			esac
			range=10
			drange=$range
			srange=1
			new=0
			del="$delimeter_name"
			delc="$delimeter_group_name_count"
			plugin_instance_name=$(echo $object_name | cut -d "$del" -f -$delc)
			delc=$((delc + 1))
			plugin_id_name=$(echo $object_name | cut -d "$del" -f $delc-)
			if [ "$Description" == "" ] ; then
				plugin_instance="$plugin_instance_name"
				plugin_id="$plugin_id_name"
			else
				del="$delimeter_desc"
				delc="$delimeter_group_desc_count"
				plugin_instance_description=$(echo $Description | cut -d "$del" -f -$delc)
				delc=$((delc + 1))
				plugin_id_description=$(echo $Description | cut -d "$del" -f $delc-)
				del="$delimeter_desc"
				plugin_instance="$plugin_instance_name""$del""$plugin_instance_description"
				del="$delimeter_name"
				plugin_id="$plugin_id_name""$del""$plugin_id_description"
			fi
			[ -f "$DataDir/$dev_name/bac-$plugin_instance/$collectd_types-$plugin_id.rrd" ] || new="1"
			while [ $count -ge $drange ] ; do
				status=0
				if [ "$new" == "1" ] ; then
					log "bacrr $devid trend-log $obj_id log-buffer 1 $srange $range"
					bacrr $devid trend-log $obj_id log-buffer 1 $srange $range > /tmp/bactrt.json 2>/dev/null || status=1
				else
					epoche=$(rrdtool last "$DataDir/$dev_name/bac-$plugin_instance/$collectd_types-$plugin_id.rrd")
					date_slot=$(date -d "@$epoche" "+%Y/%m/%d")
					time_slot=$(date -d "@$epoche" "+%H:%M:%S")
					log "bacrr $devid trend-log $obj_id log-buffer 3 $date_slot $time_slot 60"
					bacrr $devid trend-log $obj_id log-buffer 3 $date_slot $time_slot 60 > /tmp/bactrt.json 2>/dev/null || status=1
					count=-1
				fi
				grep -q list /tmp/bactrt.json || status=1
				drange=$(( drange + range ))
				srange=$(( srange + range ))
				if [ "$status" == "0" ] ; then
					json_load_file /tmp/bactrt.json
					json_select "list"

					i=1;while json_is_a ${i} array;do
							json_select $i
							json_get_var time 1
							json_get_var timeval 2
							if [ "$timeval" == "Null" ] ; then
								log "Null $dev_name/bac-$plugin_instance/$collectd_types-$plugin_id"
							else
								case $ref_object_type in
									binary*)
										if [ "$timeval" == "active" ] ; then
											timeval=1
										else
											timeval=0
										fi
										;;
								esac
								utime=$(date -d "$time" -D "%Y-%m-%dT%H:%M:%S" +"%s")
								log "PUTVAL $dev_name/bac-$plugin_instance/$collectd_types-$plugin_id interval=10 $utime:$timeval"
								echo "PUTVAL $dev_name/bac-$plugin_instance/$collectd_types-$plugin_id interval=10 $utime:$timeval" | \
								socat - UNIX-CLIENT:"$SocketFile"
							fi
							i=$(( i + 1 ))
							json_select ..
					done

					json_select ..
					json_cleanup
				fi
				rm -f /tmp/bactrt.json
			done
			utime=$(date +"%s")
			value="$(bacrp $ref_devid $ref_object_type $ref_object_instance $ref_object_property)"
			[ "$?" == "0" ] || continue
			value="$(echo $value | tr -d '\r')"
			case $ref_object_type in
				binary*)
					if [ "$value" == "active" ] ; then
						value=1
					else
						value=0
					fi
					;;
			esac
			log "PUTVAL $dev_name/bac-$plugin_instance/$collectd_types-$plugin_id interval=10 $utime:$value"
			echo "PUTVAL $dev_name/bac-$plugin_instance/$collectd_types-$plugin_id interval=10 $utime:$value" | \
			socat - UNIX-CLIENT:"$SocketFile"
		done
		log "devid $devids $devid"
	done
}

get_event() {
	local data=$1
	OOIFS=$IFS
	IFS=$OIFS
	set $data
	local id="$1"
	local object_type="$2"
	local object_instance="$3"
	json_add_string "object_instance" "$object_instance"
	json_add_string "object_type" "$object_type"
	object_name="$(bacrp $id $object_type $object_instance object-name)"
	[ "$?" == "0" ] || object_name="Type$object_type""Instance$instance"
	object_name="$(echo $object_name | tr -d '\r')"
	json_add_string "object_name" "$object_name"
	Description="$(bacrp $id $object_type $object_instance Description)"
	[ "$?" == "0" ] || Description="$object_name"
	Description="$(echo $Description | tr -d '\r')"
	json_add_string "Description" "$Description"
	event_state="$(bacrp $id $object_type $object_instance event-state)"
	[ "$?" == "0" ] || event_state="invalid"
	event_state="$(echo $event_state | tr -d '\r')"

	event_time_stamp_normal="0"
	event_state_u="$event_state"
	case $event_state in
		"low limit")
			event_state="Grenzwertunterschreitung"
			event_state_u="low_limit"
		;;
		"high limit")
			event_state="Grenzwertüberschreitung"
			event_state_u="high_limit"
		;;
		"normal")
			event_state="Normal"
			event_time_stamp_normal="$(bacrp $id $object_type $object_instance event-time-stamps 3)"
			[ "$?" == "0" ] || event_time_stamp_normal="0"
			event_time_stamp_normal="$(echo $event_time_stamp_normal | tr -d '\r')"
		;;
		"fault")
			event_state="Fehler"
		;;
		"offnormal")
			event_state="Störung"
		;;
	esac
	json_add_string "event_state" "$event_state"
	json_add_string "event_time_stamp_normal" "$event_time_stamp_normal"

	event_time_stamp="$(bacrp $id $object_type $object_instance event-time-stamps 1)"
	if [ "$?" != "0" ] ; then
		event_time_stamp="$(bacrp $id $object_type $object_instance event-time-stamps -1)"
		if [ "$?" != "0" ] ; then
			event_time_stamp=0
		else
			event_time_stamp="$(echo $event_time_stamp | tr -d '\r'| tr -d '{}' | cut -d ',' -f 1)"
		fi
	else
		event_time_stamp="$(echo $event_time_stamp | tr -d '\r')"
	fi
	json_add_string "event_time_stamp" "$event_time_stamp"

	value="$(bacrp $id $object_type $object_instance present-value)"
	[ "$?" == "0" ] || value="invalid"
	value="$(echo $value | tr -d '\r')"
	unit=""
	low_limit=""
	high_limit=""
	case $value in
		active*)
			value="$(bacrp $id $object_type $object_instance active-text)"
			[ "$?" == "0" ] || value="active"
			value="$(echo $value | tr -d '\r')"
			json_add_string "value" "$value"
		;;
		inactive*)
			value="$(bacrp $id $object_type $object_instance inactive-text)"
			[ "$?" == "0" ] || value="inactive"
			value="$(echo $value | tr -d '\r')"
			json_add_string "value" "$value"
		;;
		*[0-9])
			json_add_string "value" "$value"
			units="$(bacrp $id $object_type $object_instance units)"
			[ "$?" == "0" ] || units=""
			units="$(echo $units | tr -d '\r')"
			json_add_string "units" "$units"
			low_limit="$(bacrp $id $object_type $object_instance low-limit)"
			[ "$?" == "0" ] || low_limit=""
			low_limit="$(echo $low_limit | tr -d '\r')"
			json_add_string "low_limit" "$low_limit"
			high_limit="$(bacrp $id $object_type $object_instance high-limit)"
			[ "$?" == "0" ] || high_limit=""
			high_limit="$(echo $high_limit | tr -d '\r')"
			json_add_string "high_limit" "$high_limit"
		;;
		*)
			json_add_string "value" "0"
		;;
	esac
	IFS=$OOIFS
	if [ "$BACNET_MAIL" == "1" ] ; then
		log "msmtp $dev $id $object_type $object_instance $event_state"
		if [ ! -f /tmp/bacevent/$id-$object_type-$object_instance-$event_state_u ] ; then
			log "msmtp $id $object_type $object_instance $event_state"
			echo "To: $BACNET_MAIL_TO" > /tmp/mail.txt
			echo "Cc: $BACNET_MAIL_CC" >> /tmp/mail.txt
			echo "Bcc: $BACNET_MAIL_BCC" >> /tmp/mail.txt
			#echo "Subject: Event $object_name" >> /tmp/mail.txt
			#echo "Event $object_name $Description $value $unit $low_limit $unit - $high_limit $unit $event_state" >> /tmp/mail.txt
			cat /etc/bacalarmtemplate.txt | sed -e "s/#event_state#/$event_state/"\
			 -e "s/#dev#/$dev/"  -e "s/#object_name#/$object_name/"  -e "s/#Description#/$Description/" \
			 -e "s/#value#/$value $unit   $low_limit $unit - $high_limit $unit/"  -e "s/#devdesc#/$devdesc/"  -e "s/#devloc#/$devloc/" \
			 -e "s/#event_time_stamp#/$event_time_stamp/" >> /tmp/mail.txt
			echo "$BACNET_MAIL_PW" > /tmp/mail_pw.txt
			ping -4 -c 1 $BACNET_MAIL_SERVER >/dev/null 2>/dev/null
			/usr/bin/msmtp --host="$BACNET_MAIL_SERVER" --port="$BACNET_MAIL_PORT" --tls="on" --auth="plain" --user="$BACNET_MAIL_USER" --password="cat /tmp/mail_pw.txt" --from="$BACNET_MAIL_FROM" --read-recipients --syslog="on" -- "$BACNET_MAIL_TO" < /tmp/mail.txt >/dev/null 2&>1
		fi
		log "msmtp touch /tmp/bacevent_tmp/$id-$object_type-$object_instance-$event_state_u"
		touch /tmp/bacevent_tmp/$id-$object_type-$object_instance-$event_state_u
	fi
}

get_eventlist() {
	local id="$1"
	local support=""
	local dev=""
	local devdesc=""
	local devloc=""
	support="$(bacrp $id device $id protocol-services-supported)"
	! [ "$?" == "0" ] && log "device $id no protocol-services-supported" && return
	support="$(echo $support | cut -d ',' -f4)"
	! [ "$support" == "true" ] && log "device $id no true protocol-services-supported $support" && return
	dev="$(bacrp $id device $id object-name)"
	! [ "$?" == "0" ] && log "device $id no object-name" && return
	dev="$(echo $dev | tr -d '\r')"
	devdesc="$(bacrp $id device $id Description)"
	! [ "$?" == "0" ] && log "device $id no Description" && return
	devdesc="$(echo $devdesc | tr -d '\r')"
	devloc="$(bacrp $id device $id Location)"
	! [ "$?" == "0" ] && log "device $id no Location" && return
	devloc="$(echo $devloc | tr -d '\r')"
	log "get_eventlist $id"
	bacge $id > /tmp/eventlist_$id.txt
	if ! [ "$?" == "0" ] ; then
		sleep 2
		log "device $id no bacge retry 1"
		bacge $id > /tmp/eventlist_$id.txt
		if ! [ "$?" == "0" ] ; then
			sleep 2
			log "device $id no bacge retry 2"
			bacge $id > /tmp/eventlist_$id.txt
			if ! [ "$?" == "0" ] ; then
				sleep 2
				log "device $id no bacge retry 3"
				bacge $id > /tmp/eventlist_$id.txt
				! [ "$?" == "0" ] && log "device $id no bacge" && return
			fi
		fi
	fi
	OIFS=$IFS
	IFS=$'\n'
	for line in $(cat /tmp/eventlist_$id.txt | grep $id);do
		idx=$((idx+1))
		json_add_object 0
		json_add_string "idx" "$idx"
		json_add_string "devid" "$id"
		json_add_string "devname" "$dev"
		json_add_string "devdesc" "$devdesc"
		json_add_string "devloc" "$devloc"
		get_event "$line"
		json_close_object
	done
	IFS=$OIFS
	if [ "$BACNET_MAIL" == "1" ] ; then
		rm -f /tmp/bacevent/$id-*
		mv /tmp/bacevent_tmp/$id-* /tmp/bacevent/ 2>/dev/null
	fi
}

get_eventlistjson() {
	local id="$1"
	local dev=""
	[ -f /tmp/bacnetclient.lock ] && return
	touch /tmp/bacnetclient.lock
	log "get_eventlistjson $id"
	support="$(bacrp $id device $id protocol-services-supported)"
	[ "$?" == "0" ] || return
	support="$(echo $support | cut -d ',' -f4)"
	[ "$support" == "true" ] || return
	log "get_eventlist $id"
	dev="$(bacrp $id device $id object-name)"
	[ "$?" == "0" ] || return
	dev="$(echo $dev | tr -d '\r')"
	devdesc="$(bacrp $id device $id Description)"
	[ "$?" == "0" ] || return
	devdesc="$(echo $devdesc | tr -d '\r')"
	devloc="$(bacrp $id device $id Location)"
	[ "$?" == "0" ] || return
	devloc="$(echo $devloc | tr -d '\r')"
	json_init
	json_add_array "list"
	OIFS=$IFS
	IFS=$'\n'
	for line in $(bacge $id|grep $id);do
		idx=$((idx+1))
		json_add_object 0
		json_add_string "idx" "$idx"
		json_add_string "devid" "$id"
		json_add_string "devname" "$dev"
		json_add_string "devdesc" "$devdesc"
		json_add_string "devloc" "$devloc"
		get_event "$line"
		json_close_object
	done
	IFS=$OIFS
	json_close_array
	json_dump > /tmp/eventlist_$id.json.tmp
	json_cleanup
	mv /tmp/eventlist_$id.json.tmp /tmp/eventlist_$id.json
	rm /tmp/bacnetclient.lock
}

get_devlist() {
	local id="$1"
	local dev=""
	log "get_devlist $id"
	dev="$(bacrp $id device $id object-name)"
	[ "$?" == "0" ] || return
	dev="$(echo $dev | tr -d '\r')"
	devdesc="$(bacrp $id device $id Description)"
	[ "$?" == "0" ] || return
	devdesc="$(echo $devdesc | tr -d '\r')"
	devloc="$(bacrp $id device $id Location)"
	[ "$?" == "0" ] || return
	devloc="$(echo $devloc | tr -d '\r')"
	json_add_object 0
	json_add_string "devid" "$id"
	json_add_string "object_name" "$dev"
	json_add_string "Description" "$devdesc"
	json_add_string "Location" "$devloc"
	json_close_object
}

get_objlist() {
	local id="$1"
	[ -f /tmp/objlist_$id.json.get ] || return
	[ -f /tmp/bacnetclient.lock ] && return
	touch /tmp/bacnetclient.lock
	bacrp $id device $id object-list > /tmp/obj$id.json.tmp
	status=$?
	if [ "$status" == "0" ]; then
		cat /tmp/obj$id.json.tmp | tr -d '\r' | sed -e 's/{/{"list": [/' -e 's/}/]}/' -e 's/(\([a-z-]*\), \([0-9]*\))/{"\1": \2}/g' > /tmp/obj$id.json
		rm -f /tmp/obj$id.json.tmp
	else
		#TODO Segmentation Not Supported
		i=1
		bacrp $id device $id object-list $i > /tmp/obj$id.json.tmp
		status=$?
		echo '{"list": [' > /tmp/obj$id.json
		if [ "$status" == "0" ]; then
			cat /tmp/obj$id.json.tmp | tr -d '\r' | sed -e 's/(\([a-z-]*\), \([0-9]*\))/{"\1": \2}/g' >> /tmp/obj$id.json
		fi
		rm -f /tmp/obj$id.json.tmp
		while [ "$status" == "0" ] ; do
			i=$(( i + 1 ))
			bacrp $id device $id object-list $i > /tmp/obj$id.json.tmp
			status=$?
			if [ "$status" == "0" ]; then
				echo "," >> /tmp/obj$id.json
				cat /tmp/obj$id.json.tmp | tr -d '\r' | sed -e 's/(\([a-z-]*\), \([0-9]*\))/{"\1": \2}/g' >> /tmp/obj$id.json
			fi
			rm -f /tmp/obj$id.json.tmp
		done
		echo "" >> /tmp/obj$id.json
		echo ']}' >> /tmp/obj$id.json
	fi
	json_init
	json_load_file /tmp/obj$id.json
	#rm /tmp/obj$id.json
	json_select "list"
	i=1;while json_is_a ${i} object;do
		json_select $i
		json_get_keys object_type
		object_type="$(echo $object_type | tr _ -)"
		json_get_var object_instance $object_type
		object_name="$(bacrp $id $object_type $object_instance object-name)"
		[ "$?" == "0" ] || object_name=""
		object_name="$(echo $object_name | tr -d '\r')"
		Description="$(bacrp $id $object_type $object_instance Description)"
		[ "$?" == "0" ] || Description=""
		Description="$(echo $Description | tr -d '\r')"
		json_add_string "devid" "$id"
		json_add_string "object_type" "$object_type"
		json_add_string "object_instance" "$object_instance"
		json_add_string "object_name" "$object_name"
		json_add_string "Description" "$Description"
		json_select ..
		i=$(( i + 1 ))
	done
	if [ $i > 1 ] ; then
		json_dump > /tmp/objlist_$id.json.tmp
	fi
	json_cleanup
	mv /tmp/objlist_$id.json.tmp /tmp/objlist_$id.json
	rm -f /tmp/objlist_$id.json.get
	rm /tmp/bacnetclient.lock
}

eventlist() {
	[ -f /tmp/bacnetclient.lock ] && return
	touch /tmp/bacnetclient.lock
	[ -f /tmp/devlist.json ] || ( touch /tmp/devlist.json.get ; return )
	touch /tmp/eventlist.last
	local devids=""
	json_init
	json_load_file /tmp/devlist.json
	json_select "list"
	dev_idx=1;while json_is_a ${dev_idx} object;do
		json_select ${dev_idx}
		json_get_var devid devid
		devids="$devids $devid"
		json_select ..
		dev_idx=$(( dev_idx + 1 ))
	done
	json_cleanup
	local idx=0
	log "eventlist dev $devids"
	json_init
	json_add_array "list"
	for devid in $devids; do
		get_eventlist "$devid"
	done
	json_close_array
	json_dump > /tmp/eventlist.json.tmp
	json_cleanup
	mv /tmp/eventlist.json.tmp /tmp/eventlist.json
	rm /tmp/bacnetclient.lock
}

eventlistjson() {
	[ -f /tmp/bacnetclient.lock ] && return
	touch /tmp/bacnetclient.lock
	local idx=0
	log "eventlistjson"
	[ -f /tmp/devlist.json ] || return
	local devids=""
	json_init
	json_load_file /tmp/devlist.json
	json_select "list"
	i=1;while json_is_a ${i} object;do
		if [ -f /tmp/objlist_$i.json.get ] ; then
			json_select ${i}
			json_get_var devid devid
			devids="$devids $devid"
			json_select ..
		fi
	done
	json_cleanup
	for devid in $devids; do
		get_eventlistjson "$devid"
	done
	rm /tmp/bacnetclient.lock
}

devlist() {
	[ -f /tmp/bacnetclient.lock ] && return
	touch /tmp/bacnetclient.lock
	touch /tmp/devlist.last
	log "devlist"
	bacwi >/tmp/bacwi 2>/dev/null
	if [ "$?" == "0" ] ; then
		devids="$(cat /tmp/bacwi | tr -d '\r' | grep -v ';' | cut -d ' ' -f 3)"
		json_init
		json_add_array "list"
		for devid in $devids;do
			deny=0
			for deny_id in $BACNET_DENY_LIST ; do
				if [ "$devid" == "$deny_id" ] ; then
					deny=1
				fi
			done
			if [ "$deny" == "0" ] ; then
				get_devlist "$devid"
			fi
		done
		json_close_array
		json_dump > /tmp/devlist.json.tmp
		json_cleanup
		mv /tmp/devlist.json.tmp /tmp/devlist.json
	fi
	rm /tmp/bacnetclient.lock
}

objlist() {
	read data
	json_load "$data"
	json_get_var devid devid
	json_cleanup
	touch /tmp/objlist_$devid.json.get
	[ -f /tmp/objlist_$devid.json ] && cat /tmp/objlist_$devid.json || \
	echo '{"list": [ { "devid": "'$devid'","object_type": "wait", "object_instance": "'$(date +%M%S)'"} ] }'
}

deveventlist() {
	read data
	json_load "$data"
	json_get_var devid devid
	json_cleanup
	touch /tmp/eventlist_$devid.json.get
	[ -f /tmp/eventlist_$devid.json ] && cat /tmp/eventlist_$devid.json || \
	echo '{"list": [ { "devid": "'$devid'","object_name": "wait", "Description": "'$(date +%M%S)'"} ] }'
}

objlistjson() {
	[ -f /tmp/devlist.json ] || ( touch /tmp/devlist.json.get ; return )
	local devids=""
	json_init
	json_load_file /tmp/devlist.json
	json_select "list"
	dev_idx=1;while json_is_a ${dev_idx} object;do
		json_select ${dev_idx}
		json_get_var devid devid
		if [ -f /tmp/objlist_$devid.json.get ] ; then
			devids="$devid $devids"
		fi
		json_select ..
		dev_idx=$(( dev_idx + 1 ))
	done
	json_cleanup
	log "objlistjson dev $devids"
	for devid in $devids; do
		get_objlist "$devid"
	done
}

write_objdesc() {
	read data
	json_load "$data"
	json_get_var devid devid
	json_get_var object_type object_type
	json_get_var object_instance object_instance
	json_get_var Description Description
	json_cleanup
	object_type="$(echo $object_type | tr _ -)"
	log "write $devid $object_type $object_instance $Description"
	bacwp "$devid" "$object_type" "$object_instance" "Description" "16" "-1" "7" "$Description"
}

write_objloc() {
	read data
	json_load "$data"
	json_get_var devid devid
	json_get_var object_type object_type
	json_get_var object_instance object_instance
	json_get_var Location Location
	json_cleanup
	object_type="$(echo $object_type | tr _ -)"
	log "write $devid $object_type $object_instance $Location"
	bacwp "$devid" "$object_type" "$object_instance" "Location" "16" "-1" "7" "$Location"
}

write_ackalarm() {
	read data
	json_load "$data"
	json_get_var devid devid
	json_get_var object_type object_type
	json_get_var object_instance object_instance
	json_get_var event_time_stamp event_time_stamp
	json_get_var state state
	process_id=10
	ack_date="$(date +%Y/%m/%d-%H:%M:%S)"
	event_time_stamp=$(($event_time_stamp/1000))
	event_date="$(date -d @$event_time_stamp "+%Y/%m/%d-%H:%M:%S")"
	log "bacackalarm $devid $process_id $object_type $object_instance $state $event_date openwrt $ack_date"
	bacackalarm "$devid" "$process_id" "$object_type" "$object_instance" "$state" "$event_date" "openwrt" "$ack_date"
}

get_config() {
	config_load bacnetclient
	config_get iface default iface "br-lan"
	[ -z "$iface" ] || export BACNET_IFACE="$iface"
	config_get port default port
	#set random src port with bbmd
	#rand="$(echo -n $(head -n 1 /dev/urandom 2>/dev/null | md5sum | cut -b 1-5))"
	#port="$(printf "%d" "0x$rand")"
	[ -z "$port" ] || export BACNET_IP_PORT="$port"
	config_get bbmd_addr default bbmd_addr
	[ -z "$bbmd_addr" ] || export BACNET_BBMD_ADDRESS="$bbmd_addr"
	config_get bbmd_port default bbmd_port
	[ -z "$bbmd_port" ] || export BACNET_BBMD_PORT="$bbmd_port"
	export BACNET_DENY_LIST=""
	config_get deny_list default deny_list
	[ -z "$deny_list" ] || export BACNET_DENY_LIST="$deny_list"
	config_get deny_list_log default deny_list_log
	[ -z "$deny_list_log" ] || export BACNET_DENY_LIST_LOG="$deny_list_log"
	config_get delimeter_name default delimeter_name
	[ -z "$delimeter_name" ] && delimeter_name=":"
	export BACNET_DELIMETER_NAME="$delimeter_name"
	config_get delimeter_desc default delimeter_desc
	[ -z "$delimeter_desc" ] && delimeter_desc="_"
	export BACNET_DELIMETER_DESC="$delimeter_desc"
	config_get delimeter_group_name_count default delimeter_group_name_count
	[ -z "$delimeter_group_name_count" ] && delimeter_group_name_count=1
	export BACNET_DELIMETER_GROUP_NAME_COUNT="$delimeter_group_name_count"
	config_get delimeter_group_desc_count default delimeter_group_desc_count
	[ -z "$delimeter_group_desc_count" ] && delimeter_group_desc_count=2
	export BACNET_DELIMETER_GROUP_DESC_COUNT="$delimeter_group_desc_count"
	config_get collectd_interval default collectd_interval
	[ -z "$collectd_interval" ] && collectd_interval=10
	export COLLECTD_INTERVAL="$collectd_interval"
	config_get debug default debug
	[ -z "$debug" ] || export BACNET_DEBUG="0"
	export BACNET_DEBUG="$debug"
	config_get eventlist_interval default eventlist_interval
	[ -z "$eventlist_interval" ] && eventlist_interval=5
	export EVENTLIST_INTERVAL="$eventlist_interval"
	if [ -f /usr/bin/msmtp ] ; then
		config_get mail default mail
		[ -z "$mail" ] || export BACNET_MAIL="$mail"
		if [ "$BACNET_MAIL" == "1" ] ; then
			config_get mail_from default mail_from
			[ -z "$mail_from" ] || export BACNET_MAIL_FROM="$mail_from"
			config_get mail_to default mail_to
			[ -z "$mail_to" ] || export BACNET_MAIL_TO="$mail_to"
			config_get mail_cc default mail_cc
			[ -z "$mail_cc" ] || export BACNET_MAIL_CC="$mail_cc"
			config_get mail_bc default mail_bcc
			[ -z "$mail_bcc" ] || export BACNET_MAIL_BCC="$mail_bcC"
			config_get mail_server default mail_server
			[ -z "$mail_server" ] || export BACNET_MAIL_SERVER="$mail_server"
			config_get mail_port default mail_port
			[ -z "$mail_port" ] && mail_port=587
			export BACNET_MAIL_PORT="$mail_port"
			config_get mail_user default mail_user
			[ -z "$mail_user" ] || export BACNET_MAIL_USER="$mail_user"
			config_get mail_pw default mail_pw
			[ -z "$mail_pw" ] || export BACNET_MAIL_PW="$mail_pw"
			mkdir -p /tmp/bacevent
			mkdir -p /tmp/bacevent_tmp
		fi
	fi
	log "$BACNET_IFACE $BACNET_IP_PORT $BACNET_BBMD_ADDRESS $BACNET_BBMD_PORT"
}

case "$1" in
	list)
		json_init
		json_add_object "eventlist"
		json_close_object
		json_add_object "deveventlist"
		json_add_string "devid" "devid"
		json_close_object
		json_add_object "devlist"
		json_close_object
		json_add_object "objlist"
		json_add_string "devid" "devid"
		json_close_object
		json_add_object "objdesc"
		json_add_string "devid" "devid"
		json_add_string "object_instance" "object_instance"
		json_add_string "Description" "Description"
		json_close_object
		json_add_object "objloc"
		json_add_string "devid" "devid"
		json_add_string "object_instance" "object_instance"
		json_add_string "Location" "Location"
		json_close_object
		json_add_object "ackevent"
		json_add_string "devid" "devid"
		json_add_string "object_instance" "object_instance"
		json_add_string "event_time_stamp" "event_time_stamp"
		json_close_object
		json_dump
	;;
	call)
		case "$2" in
			eventlist) 
				cat /tmp/eventlist.json || \
				echo '{"list": [ { "idx": "0","devid": "'$(date +%M%S)'", "devname": "wait"} ] }'
				touch /tmp/eventlist.json.get
			;;
			devlist) 
				cat /tmp/devlist.json || \
				echo '{"list": [ { "devid": "'$(date +%M%S)'","object_name": "wait"} ] }'
				touch /tmp/devlist.json.get
			;;
			objlist)
				objlist
				touch /tmp/objlist.json.get
			;;
			deveventlist)
				deveventlist
				touch /tmp/deveventlist.json.get
			;;
			objdesc) get_config && write_objdesc ;;
			objloc) get_config && write_objloc ;;
			ackevent) get_config && write_ackalarm ;;
			_cron)
				get_config
				[ -f /tmp/devlist.json.get ] && devlist
				rm -f /tmp/devlist.json.get
				[ -f /tmp/eventlist.json.get ] && eventlist
				rm -f /tmp/eventlist.json.get
				[ -z "$(find /tmp/devlist.last -mmin -$EVENTLIST_INTERVAL -exec echo lower \; 2>/dev/null)" ] && devlist
				[ -z "$(find /tmp/eventlist.last -mmin -$EVENTLIST_INTERVAL -exec echo lower \; 2>/dev/null)" ] && eventlist
				[ -f /tmp/objlist.json.get ] && objlistjson
				rm -f /tmp/objlist.json.get
				[ -f /tmp/deveventlist.json.get ] && eventlistjson
				rm -f /tmp/deveventlist.json.get
				[ -z "$(find /tmp/devlist.last -mmin -$COLLECTD_INTERVAL -exec echo lower \; 2>/dev/null)" ] && devlist
				[ -z "$(find /tmp/collectd.last -mmin -$COLLECTD_INTERVAL -exec echo lower \; 2>/dev/null)" ] && collectd
			;;
		esac
	;;
esac
